<?php

namespace Kunstmaan\MediaBundle\Tests\Helper;

use Kunstmaan\MediaBundle\Entity\Folder;
use Kunstmaan\MediaBundle\Helper\FolderManager;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-07-10 at 14:02:03.
 */
class FolderManagerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ObjectRepository
     */
    protected $repository;

    /**
     * @var Folder
     */
    protected $folder;

    /**
     * @var FolderManager
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     * @covers Kunstmaan\MediaBundle\Helper\FolderManager::__construct
     */
    protected function setUp()
    {
        $this->repository = $this->getMockBuilder('Kunstmaan\MediaBundle\Repository\FolderRepository')
            ->disableOriginalConstructor()
            ->getMock();

        $this->repository
            ->expects($this->any())
            ->method('getParentIds')
            ->will($this->returnValue(array(1, 2)));

        $rootFolder = new Folder();
        $rootFolder->setId(1);

        $this->repository
            ->expects($this->any())
            ->method('getFolder')
            ->with($this->equalTo(1))
            ->will($this->returnValue($rootFolder));

        $this->folder = new Folder();
        $this->folder->setId(3);

        $this->object = new FolderManager($this->repository);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Kunstmaan\MediaBundle\Helper\FolderManager::getFolderHierarchy
     */
    public function testGetFolderHierarchy()
    {
        $this->repository
            ->expects($this->once())
            ->method('childrenHierarchy')
            ->with($this->equalTo($this->folder))
            ->will($this->returnValue(array()));

        $this->object->getFolderHierarchy($this->folder);
        $this->object->getFolderHierarchy($this->folder);
    }

    /**
     * @covers Kunstmaan\MediaBundle\Helper\FolderManager::getRootFolderFor
     */
    public function testGetRootFolderFor()
    {
        $this->repository
            ->expects($this->once())
            ->method('getFolder')
            ->with($this->equalTo(1));

        $rootFolder = $this->object->getRootFolderFor($this->folder);
        $this->assertEquals(1, $rootFolder->getId());

        $rootFolder = $this->object->getRootFolderFor($this->folder);
        $this->assertEquals(1, $rootFolder->getId());
    }

    /**
     * @covers Kunstmaan\MediaBundle\Helper\FolderManager::getParentIds
     */
    public function testGetParentIds()
    {
        $this->repository
            ->expects($this->once())
            ->method('getParentIds')
            ->with($this->equalTo($this->folder));

        $this->assertEquals(array(1, 2), $this->object->getParentIds($this->folder));
        $this->assertEquals(array(1, 2), $this->object->getParentIds($this->folder));
    }
}
